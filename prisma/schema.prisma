// Prisma schema for SellOnMap
// Database: PostgreSQL (set DATABASE_URL in .env)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AdModerationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isAdmin       Boolean   @default(false)
  
  // Per-user ad configuration
  adActiveDays  Int       @default(3)
  maxActiveAds  Int       @default(1)

  accounts Account[]
  sessions Session[]
  ads      Ad[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ad {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Int
  currency    String   @default("USD")
  address     String
  lat         Float    @db.DoublePrecision
  lng         Float    @db.DoublePrecision
  category    String   // e.g. "property.rental", "property.sale.land", "clothing"
  photos      String[]
  attributes  Json?

  moderationStatus AdModerationStatus @default(PENDING)
  rejectReason     String?

  isActive     Boolean  @default(false)
  activatedAt  DateTime?
  expiresAt    DateTime?
  deactivatedAt DateTime?

  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category, isActive])
  @@index([moderationStatus, isActive])
  @@index([lat, lng])
}

